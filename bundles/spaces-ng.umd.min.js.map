{
  "version": 3,
  "file": "spaces-ng.umd.min.js",
  "sources": [
    "ng://spaces-ng/node_modules/tslib/tslib.es6.js",
    "ng://spaces-ng/out/lib/spaces_logging.service.ts",
    "ng://spaces-ng/out/lib/spaces_base.service.ts",
    "ng://spaces-ng/out/lib/spaces_messages.service.ts",
    "ng://spaces-ng/out/lib/spaces_params.resolve.ts",
    "ng://spaces-ng/out/lib/spaces_request.service.ts",
    "ng://spaces-ng/out/lib/spaces_storage.service.ts",
    "ng://spaces-ng/out/lib/spaces_utilities.service.ts",
    "ng://spaces-ng/out/lib/components/spaces-landing-page/spaces-landing-page.component.ts",
    "ng://spaces-ng/out/SpacesModule.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/* Core */\nimport { Injectable } from '@angular/core';\n\n/* Third-Party */\nimport { BowserService } from 'ngx-bowser';\n\n@Injectable()\nexport class SpacesLoggingService {\n    private _logLevel: number = 1;  // info\n    private useColor: boolean = true;\n    private browser: string;\n    // title color defaults\n    private defaultBackground: string = '#fff';\n    private defaultColor: string = '#000';\n    // colors by level\n    private criticalBackground: string = '#F296A1';\n    private criticalColor: string = '#000';\n    private debugBackground: string = '#9EBABA';\n    private debugColor: string = '#FFF';\n    private errorBackground: string = '#F296A1';\n    private errorColor: string = '#FFF';\n    private importantBackground: string = '#FF1493';\n    private importantColor: string = '#000';\n    private infoBackground: string = '#CCC691';\n    private infoColor: string = '#000';\n    private warnBackground: string = '#F5AD89';\n    private warnColor: string = '#000';\n    // colors by method\n    private methodColors: any = {};\n    private moduleColors: any = {};\n    // levels - bcs change to enum if possible\n    private levels: any = {\n        debug: 0,\n        info: 1,\n        warn: 2,\n        error: 3,\n        critical: 4,\n        important: 5\n    }\n\n    constructor(\n        private bowser: BowserService\n    ) { \n        this.browser = this.bowser.bowser.name.toLowerCase();\n        this.info('Browser', this.browser);\n    }\n\n    get logLevel(): string {\n        /**\n         * Return the logging level\n         * @return The logging level (debug, info, warn, critical)\n         */\n        let levels = Object.keys(this.levels);\n        return levels[this._logLevel];\n    }\n    \n    set logLevel(level: string) {\n        /**\n         * Set the logging level\n         * @param The logging level (debug, info, warn, critical)\n         */\n        if (this.levels[level] !== 'null') {\n            this._logLevel = this.levels[level];\n        }\n    }\n    \n    public disableColor(): void {\n        /**\n         * Disable colors in console logging\n         */\n        this.useColor = false;\n    }\n    \n    public criticalColors(\n        background: string,\n        color: string\n    ) {\n        /**\n         * Set color for critical console messages\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.criticalBackground = background;\n        this.criticalColor = color;\n    }\n    \n    public debugColors(\n        background: string,\n        color: string\n    ) {\n        /**\n         * Set color for debug console messages\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.debugBackground = background;\n        this.debugColor = color;\n    }\n    \n    public errorColors(\n        background: string,\n        color: string\n    ) {\n        /**\n         * Set color for error console messages\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.errorBackground = background;\n        this.errorColor = color;\n    }\n    \n    public importantColors(\n        background: string,\n        color: string\n    ) {\n        /**\n         * Set color for info console messages\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.importantBackground = background;\n        this.importantColor = color;\n    }\n    \n    public infoColors(\n        background: string,\n        color: string\n    ) {\n        /**\n         * Set color for log console messages\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.infoBackground = background;\n        this.infoColor = color;\n    }\n    \n    public warnColors(\n        background: string,\n        color: string\n    ) {\n        /**\n         * Set color for warn console messages\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.warnBackground = background;\n        this.warnColor = color;\n    }\n    \n    public methodColor(\n        background: string,\n        color: string,\n        methodName?: string\n    ): void {\n        /**\n         * Set default color for the title on all logs for the current method\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        if (!methodName) {\n            // try to get method name from the stack\n            let methodIndex = this.methodIndex();\n            const error = new Error;\n            let logStack = error.stack ? error.stack.split('\\n') : [];\n            if (logStack.length > 0) {\n                let caller = this.parseLogLine(logStack[methodIndex]);\n                methodName = caller.method;\n            }\n        }\n        if (methodName !== 'null') {\n            this.methodColors[methodName] = {\n                bg: background,\n                color: color\n            };\n        }\n    }\n    \n    public moduleColor(\n        background: string,\n        color: string,\n        moduleName?: string\n    ): void {\n        /**\n         * Set default color for the title on all logs for the current module\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        if (!moduleName) {\n            let methodIndex = this.methodIndex();\n            const error = new Error;\n            let logStack = error.stack ? error.stack.split('\\n') : [];\n            if (logStack.length > 0) {\n                let caller = this.parseLogLine(logStack[methodIndex]);\n                moduleName = caller.module;\n            }\n        }\n        if (moduleName !== 'null') {\n            this.moduleColors[moduleName] = {\n                bg: background,\n                color: color\n            };\n        }\n    }\n    \n    public log(\n        level: string,\n        title: string,\n        msg: any,\n        bg: string = '#fff',\n        color: string = '#000',\n        headerBg: string = '#fff',\n        headerColor: string = '#000',\n        methodIndex: any = undefined\n    ): void {\n        /**\n         * Console Log the message\n         * @param level - The logging level\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         * @param headerBg - The background color in hex format for the header.\n         * @param headerColor - The font color in hex format for the header.\n         * @param methodIndex - The index of the method in the stack\n         */\n        let levelNo = this.levels[level];\n        \n        if (levelNo >= this._logLevel) {\n            const error = new Error;\n            let logStack = error.stack ? error.stack.split('\\n') : [];\n            \n            if (methodIndex === undefined) {\n                methodIndex = this.methodIndex();\n            }\n            // console.log('methodIndex', methodIndex);\n            let caller = this.parseLogLine(logStack[methodIndex]);\n            if (this.browser === 'chrome' &&  caller.module === 'SafeSubscriber') {\n                // best try to handle chrome stack manipulation\n                caller = this.parseLogLine(logStack[logStack.length - 1]);\n            }\n            \n            let c = this.useColor ? ' %c ' : ' ';\n            let header = [\n                level.toUpperCase(),\n                c,\n                this.getHeader(logStack[methodIndex]),\n                c,\n                title,\n                ' '].join(' ');\n            \n            // update colors if module color defined\n            if (this.moduleColors[caller.module]) {\n                bg = this.moduleColors[caller.module].bg;\n                color = this.moduleColors[caller.module].color;\n            }\n            \n            // update colors if method color defined\n            if (this.methodColors[caller.method]) {\n                bg = this.methodColors[caller.method].bg;\n                color = this.methodColors[caller.method].color;\n            }\n            \n            // console log\n            if (this.useColor) {\n                console.log(header, this.css(headerBg, header), this.css(bg, color), msg);\n            } else {\n                console.log(header, msg);\n            }\n        }\n    }\n    \n    private getHeader(\n        logLine: string\n    ): string {\n        /**\n         * Best effor to retrieve module, method, fileName, and line number from error stack.\n         * @param logLine - The line from the Error stack\n         * @param color - Return header with color\n         * @return The module, method, fileName, and line number\n         */\n        let header;\n        let data;\n        let line_data;\n        let module;\n        let method;\n        let fileName;\n        let line;\n        // console.log('logLine', logLine);\n        \n        let divider1;\n        let divider2;\n        \n        switch (this.browser) {\n            case 'chrome':\n                data = logLine.trim().match(/^at\\s(?:new\\s)?(\\w+)(?:\\.)?(\\w+)?\\s/) || [];\n                line_data = logLine.trim().match(/(\\w+\\.\\w+)\\:([0-9]+\\:[0-9]+)/) || [];\n                \n                module = data[1];\n                method = data[2];\n                fileName = line_data[1];\n                line = line_data[2];\n                \n                header = '';\n                divider1 = '';\n                if (module) {\n                    header += module;\n                    divider1 = ':';\n                }\n                if (method) {\n                    header += divider1 + method;\n                }\n                divider2 = '';\n                if (fileName) {\n                    header += ' (' + fileName;\n                    divider2 = ':';\n                }\n                if (line) {\n                    header += divider2 + line + ')';\n                }\n                break;\n            case 'firefox':\n                data = logLine.trim().match(/(\\w+)\\.(?:\\w+)\\.(\\w+)@/) || [];\n                line_data = logLine.trim().match(/(\\w+\\.\\w+)\\:([0-9]+\\:[0-9]+)/) || [];\n                \n                module = data[1];\n                method = data[2];\n                fileName = line_data[1];\n                line = line_data[2];\n                \n                header = '';\n                divider1 = '';\n                if (module) {\n                    header += module;\n                    divider1 = ':';\n                }\n                if (method) {\n                    header += divider1 + method;\n                }\n                divider2 = '';\n                if (fileName) {\n                    header += ' (' + fileName;\n                    divider2 = ':';\n                }\n                if (line) {\n                    header += divider2 + line + ')';\n                }\n                break;\n            case 'safari':\n                data = logLine.trim().match(/^(\\w+)@/) || [];\n                line_data = logLine.trim().match(/(\\w+\\.\\w+)\\:([0-9]+\\:[0-9]+)/) || [];\n                \n                method = data[1];\n                fileName = line_data[1];\n                line = line_data[2];\n                \n                header = '';\n                divider1 = '';\n                if (method) {\n                    header += method;\n                }\n                divider2 = '';\n                if (fileName) {\n                    header += ' (' + fileName;\n                    divider2 = ':';\n                }\n                if (line) {\n                    header += divider2 + line + ')';\n                }\n                break;\n            default:\n                console.warn('Advanced logging is not supported in browser', this.browser);\n        } \n        return header;\n    }\n    \n    private parseLogLine(logLine: string): any {\n        /**\n         * Best effor to retrieve module, method, fileName, and line number from error stack.\n         * @param logLine - The line from the Error stack\n         * @return The module, method, fileName, and line number\n         */\n        let data;\n        let line_data;\n        let module;\n        let method;\n        let fileName;\n        let line;\n        // console.log('logLine', logLine);\n        \n        // TODO - switch this to case statement to define regex so data and line_data are only set once.\n        if (this.browser === 'chrome') {\n            /* best effor at getting module, method, fileName and line number */\n            data = logLine.trim().match(/^at\\s(?:new\\s)?(\\w+)(?:\\.)?(\\w+)?\\s/) || [];\n            line_data = logLine.trim().match(/(\\w+\\.\\w+)\\:([0-9]+\\:[0-9]+)/) || [];\n        } else if (this.browser === 'firefox') {\n            data = logLine.trim().match(/(\\w+)\\.(?:\\w+)\\.(\\w+)@/) || [];\n            line_data = logLine.trim().match(/(\\w+\\.\\w+)\\:([0-9]+\\:[0-9]+)/) || [];\n        } else if (this.browser === 'safari') {\n            data = logLine.trim().match(/^(\\w+)@/) || [];\n            line_data = logLine.trim().match(/(\\w+\\.\\w+)\\:([0-9]+\\:[0-9]+)/) || [];\n        }\n        if (data) {\n            module = data[1] || 'NA';\n            method = data[2] || 'NA';\n        }\n        if (line_data) {\n            fileName = line_data[1] || '?';\n            line = line_data[2] || '?';\n        }\n        return {\n            module: module,\n            method: method,\n            fileName: fileName,\n            line: line\n        }\n    }\n    \n    private methodIndex(): number {\n        /**\n         * Return the method index dependent on the browser.\n         * @return The index number\n         */\n        let index = 3;\n        switch (this.browser) {\n            case 'chrome':\n                index = 3;\n                break;\n            case 'firefox':\n                index = 2;\n                break;\n            case 'safari':\n                index = 2;\n                break;\n            default:\n                console.warn('Advanced logging is not supported in browser', this.browser);\n        } \n        return index;\n    }\n    \n    public critical(\n        title: string,\n        msg: any = '',\n        bg: string = this.defaultBackground,\n        color: string = this.defaultColor\n    ): void {\n        /**\n         * Console Log Critical messages\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.log('critical', title, msg, bg, color, this.criticalBackground, this.criticalColor);\n    }\n\n    public debug(\n        title: string,\n        msg: any = '',\n        bg: string = this.defaultBackground,\n        color: string = this.defaultColor\n    ): void {\n        /**\n         * Console Log Debug messages\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.log('debug', title, msg, bg, color, this.debugBackground, this.debugColor);\n    }\n    \n    public error(\n        title: string,\n        msg: any = '',\n        bg: string = this.defaultBackground,\n        color: string = this.defaultColor\n    ): void {\n        /**\n         * Console Log Error messages\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.log('error', title, msg, bg, color, this.errorBackground, this.errorColor);\n    }\n\n    public info(\n        title: string,\n        msg: any = '',\n        bg: string = this.defaultBackground,\n        color: string = this.defaultColor\n    ): void {\n        /**\n         * Console Log Info messages\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.log('info', title, msg, bg, color, this.infoBackground, this.infoColor);\n    }\n    \n    public important(\n        title: string,\n        msg: any = '',\n        bg: string = this.defaultBackground,\n        color: string = this.defaultColor\n    ): void {\n        /**\n         * Console Log Warn messages\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.log('important', title, msg, bg, color, this.importantBackground, this.importantColor);\n    }\n\n    public warn(\n        title: string,\n        msg: any = '',\n        bg: string = this.defaultBackground,\n        color: string = this.defaultColor\n    ): void {\n        /**\n         * Console Log Warn messages\n         * @param title - The title or description of the data being logged\n         * @param msg - The msg to be logged\n         * @param bg - The background color in hex format.\n         * @param color - The font color in hex format.\n         */\n        this.log('warn', title, msg, bg, color, this.warnBackground, this.warnColor);\n    }\n\n    private css(\n        background:string,\n        color: string\n    ): string {\n        /**\n         * Format the CSS for console colors\n         * @param background - The background color in hex format.\n         * @param color - The font color in hex format.\n         * @return The formatted CSS string for console colors\n         */\n        return [\n            'background: ',\n            background + '; ',\n            'color: ',\n            color + ';'\n        ].join(' ');\n    }\n}",
    "import { Injectable } from '@angular/core';\nimport {\n    Http,\n    QueryEncoder,\n    RequestMethod,\n    RequestOptions,\n    Response,\n    URLSearchParams\n}\nfrom '@angular/http';\n\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\n\nimport { SpacesLoggingService } from './spaces_logging.service';\n\nclass SpacesQueryEncoder extends QueryEncoder {\n    encodeKey(k: string): string { return encodeURIComponent(k); }\n    encodeValue(v: string): string { return encodeURIComponent(v); }\n}\n\n\n@Injectable()\nexport class SpacesBaseService implements Resolve<any> {\n    private _params: any;\n    private _tcToken: string;\n    private _tcTokenExpires: number;\n    private _initialized: boolean = false;\n    private initPromise: Promise<any>;\n    private initPromiseResolver: () => any;\n    private initPromiseRejector: () => any;\n\n\n    constructor(\n        private http: Http,\n        private logging: SpacesLoggingService,\n    ) {\n        /* Set logging module parameters */\n        this.logging.moduleColor('#2878b7', '#fff', 'SpacesBaseService');\n        this.initPromise = new Promise((resolve, reject) => {\n            this.initPromiseResolver = resolve;\n            this.initPromiseRejector = reject;\n        });\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<any> {\n        console.log('resolve');\n\n        console.log('route.queryParamMap.keys', route.queryParamMap.keys);\n        if (!this._initialized) {\n            console.log(`Got params ${route.queryParamMap}`);\n            // this.init(route.queryParamMap);\n            this._params = route.queryParams;\n            console.log('this._params', this._params);\n            console.log('route.queryParamMap', route.queryParamMap);\n            console.log('route.queryParams', route.queryParams);\n            this._tcToken = decodeURIComponent(this._params['tcToken']);  // set for token renew\n            console.log('this._tcToken', this._tcToken);\n            this._tcTokenExpires = this._params['tcTokenExpires'];  // set for token renew\n            this._initialized = true;\n            this.initPromiseResolver();\n        }\n        return this.initPromise;\n    }\n    \n    get initialized(): Promise<boolean> {\n        /**\n         * Promise resolved when Query String Parameters are parsed\n         */\n        return this.initPromise;\n    }\n\n    get params(): any {\n        /**\n         * The entire parameters object from initial load of App\n         */\n        return this._params;\n    }\n\n    public param(name): string {\n        /**\n         * Return the request parameter\n         * @param name The parameter name (key)\n         * @return Decoded URL component\n         */\n         if (this.initialized) {\n            // spaces need to be un-encoded from '+' before decoding\n            let param = this._params[name];\n            if (param !== undefined) {\n                param = decodeURIComponent(param.replace('+', ' '));\n            }\n            return param;\n         } else {\n            this.logging.warn('Service is not intialized.', '');\n            return '';\n         }\n    }\n\n    get tcApiPath(): string {\n        /**\n         * Return the ThreatConnect API Path\n         * @return The ThreatConnect API path passed in the query string parameters\n         */\n        return this.param('tcApiPath');\n    }\n\n    get tcProxyServer(): string {\n        /**\n         * Return the ThreatConnect Proxy Server URL\n         * @return The ThreatConnect Proxy Server URL calculated from tcApiPath\n         */\n        // return this.param('tcApiPath').replace(/\\/api$/, '');\n        /* The proxy server *should* be the same server as is being accessed for the Spaces app. */\n        return '';\n    }\n\n    get tcSpaceElementId(): string {\n        /**\n         * Return the ThreatConnect Spaces Element Id\n         * @return The Spaces Element Id passed in the query string parameters\n         */\n        return this.param('tcSpaceElementId');\n    }\n\n    get tcToken(): string {\n        /**\n         * Return the ThreatConnect API Token\n         * @return The API token passed in the query string parameters\n         */\n\n        /* check if token is expired and if so renew */\n        let buffer = 15;\n        let currentSeconds = (new Date).getTime() / 1000 + buffer;\n        if (this._tcTokenExpires < currentSeconds) {\n            this.tcTokenRenew();\n        } else {\n            return this._tcToken;\n        }\n    }\n\n    private tcTokenRenew(): any {\n        /**\n         * Renew ThreatConnect API Token\n         * @return The new ThreatConnect Token\n         */\n        let params = new URLSearchParams('', new SpacesQueryEncoder());  // must be above options\n        let options = new RequestOptions({\n            method: RequestMethod.Get,\n            search: params\n        });\n        params.set('expiredToken', this._tcToken);\n\n        let url = [\n            this._params['tcApiPath'],\n            'appAuth'\n        ].join('/');\n\n        this.http.request(url, options)\n            .subscribe(\n                res => {\n                    this.logging.debug('res', res);\n                    let response = res.json();\n                    if (response.success === true) {\n                        this._tcToken = response.apiToken;\n                        this._tcTokenExpires = response.apiTokenExpires;\n                    }\n                    return this._tcToken;\n                },\n                err => {\n                    this.logging.error('Token Renewal Error', err);\n                    // bcs - should old token be returned\n                    return this._tcToken;\n                }\n            );\n    }\n\n    private handleAjaxError(error: Response): any {\n        /**\n         * Execute the API request\n         * @param err - The https Response Object\n         */\n        const errorText = error.text();\n        this.logging.error('spaces_base.service: request to ' +  error.url +\n            ' failed with: ', errorText);\n        // console.error('spaces_base.service: request to ' + \n        //     error.url + ' failed with: ' + errorText);\n        return Promise.reject(errorText || error);\n    }\n}",
    "import { Injectable } from '@angular/core';\nimport { Message } from 'primeng/primeng';\nimport { SpacesLoggingService } from './spaces_logging.service'\n\n@Injectable()\nexport class SpacesMessagesService {\n    public msgs: Message[] = [];\n\n    constructor(\n        private logging: SpacesLoggingService\n    ) { \n        this.logging.moduleColor('#00008b', '#fff', 'SpacesMessagesService');\n    }\n\n    public showSuccess(summary: string, detail: string) {\n        this.showMessage('success', summary, detail);\n    }\n\n    public showInfo(summary: string, detail: string) {\n        this.showMessage('info', summary, detail);\n    }\n\n    public showWarning(summary: string, detail: string) {\n        this.showMessage('warn', summary, detail);\n    }\n\n    public showError(summary: string, detail: string) {\n        this.showMessage('error', summary, detail);\n    }\n\n    private showMessage(severity: string, summary: string, detail: string) {\n        this.clearMessages();\n        this.msgs.push({\n            severity: severity,\n            summary: summary,\n            detail: detail\n        });\n    }\n\n    private clearMessages() {\n        this.msgs = [];\n    }\n}",
    "import { Injectable } from '@angular/core';\nimport {\n    Resolve,\n    ActivatedRouteSnapshot }\nfrom '@angular/router';\nimport { SpacesBaseService } from './spaces_base.service'\n\n@Injectable()\nexport class SpacesParamsResolve implements Resolve<any> {\n  \n  constructor(\n      private spacesBase: SpacesBaseService\n  ) {\n      /* Empty Block */\n  }\n  \n  resolve(route: ActivatedRouteSnapshot) {\n      // this.spacesBase.init(route.queryParams);\n      console.log('BCS', this.spacesBase.params)\n      return route.queryParams;\n  }\n}",
    "import { Injectable } from '@angular/core';\nimport {\n    Headers,\n    Http,\n    QueryEncoder,\n    RequestMethod,\n    RequestOptions,\n    Response,\n    URLSearchParams\n}\nfrom '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/map';\nimport { SpacesBaseService } from './spaces_base.service';\nimport { SpacesLoggingService } from './spaces_logging.service';\n\n\nclass SpacesQueryEncoder extends QueryEncoder {\n    constructor(private logging: SpacesLoggingService) {\n        super();\n    }\n\n    encodeKey(k: string): string {\n        this.logging.info('Query Encoder', `Got key ${k}`);\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        this.logging.info('Query Encoder', `Got value ${v}`);\n        return encodeURIComponent(v);\n    }\n}\n\n\n@Injectable()\nexport class SpacesRequestService {\n    /**\n     * Generic Request Module for ThreatConnect API\n     */\n\n    private headers = new Headers();\n    private params = new URLSearchParams('', new SpacesQueryEncoder(this.logging));  // must be above options\n    private options = new RequestOptions({\n        headers: this.headers,\n        method: RequestMethod.Get,\n        params: this.params\n    });\n    private useProxy: boolean;\n    private requestUrl: string;\n\n    constructor(\n        private http: Http,\n        private logging: SpacesLoggingService,\n        private spacesBase: SpacesBaseService\n    ) {\n        this.logging.moduleColor('#2878b7', '#fff', 'SpacesRequestService');\n    }\n    \n    public method(data: string) {\n        /**\n         * Set the HTTP method\n         * @param data - The HTTP Method (DELETE, GET, POST, PUT)\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        switch (data.toUpperCase()) {\n            case 'DELETE':\n                this.options.method = RequestMethod.Delete;\n                break;\n            case 'GET':\n                this.options.method = RequestMethod.Get;\n                break;\n            case 'POST':\n                this.options.method = RequestMethod.Post;\n                break;\n            case 'PUT':\n                this.options.method = RequestMethod.Put;\n                break;\n            default:\n                this.options.method = RequestMethod.Get;\n                break;\n        }\n        return this;\n    }\n    \n    public proxy(data: boolean) {\n        /**\n         * Use secureProxy\n         * @param data - Enable/Disable proxy\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.useProxy = data;\n        return this;\n    }\n\n    public url(data: string) {\n        /**\n         * Set the request URI\n         * @param data - The URL for the request\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.requestUrl = data;\n        return this;\n    }\n\n    //\n    // headers\n    //\n\n    public header(key: string, val: any) {\n        /**\n         * Add a header to the request\n         * @param key - The header key\n         * @param val - The header value\n         * @return The RequestService Object\n         */\n        this.headers.set(key, val);\n        this.logging.debug('key', key);\n        this.logging.debug('val', val);\n        return this;\n    }\n\n    // common headers\n\n    public authorization(data: string) {\n        /**\n         * Helper method to set common authorization header\n         * @param data - The authorization header\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.header('Authorization', data);\n        return this;\n    }\n\n    public contentType(data: string) {\n        /**\n         * Helper method to set common content-type header\n         * @param data - The content-type header\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.header('Content-Type', data);\n        return this;\n    }\n\n    //\n    // body\n    //\n    \n    public body(data: any) {\n        /**\n         * The body for the request\n         * @param data - The body contents\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.options.body = data;\n        return this;\n    }\n\n    //\n    // params\n    //\n\n    public param(key: string, val: any) {\n        /**\n         * Add a query string parameter to the request\n         * @param key - The parameter key\n         * @param val - The parameter value\n         * @return The RequestService Object\n         */\n        this.logging.debug('key', key);\n        this.logging.debug('val', val);\n        this.params.set(key, val);\n        return this;\n    }\n\n    // common paramaeters\n\n    public createActivityLog(data: boolean) {\n        /**\n         * Helper method to set common createActivityLog query string parameter\n         * @param data - The createActivityLog boolean value\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.param('createActivityLog', String(data));\n        return this;\n    }\n\n    public modifiedSince(data: string) {\n        /**\n         * Helper method to set common modifiedSince query string parameter\n         * @param data - The modifiedSince value\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.param('modifiedSince', data);\n        return this;\n    }\n\n    public owner(data: string) {\n        /**\n         * Helper method to set common owner query string parameter\n         * @param data - The owner value\n         * @return The RequestService Object\n         */\n        this.param('owner', data);\n        return this;\n    }\n\n    public resultLimit(data: number) {\n        /**\n         * Helper method to set common resultLimit query string parameter\n         * @param data - The resultLimit value for pagination\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.param('resultLimit', String(data));\n        return this;\n    }\n\n    public resultStart(data: number) {\n        /**\n         * Helper method to set common resultStart query string parameter\n         * @param data - The resultStart value for pagination\n         * @return The RequestService Object\n         */\n        this.logging.debug('data', data);\n        this.param('resultStart', String(data));\n        return this;\n    }\n\n    private proxyUrl() {\n        /**\n         * Proxify the request using secureProxy\n         */\n        let params = new URLSearchParams();\n        params.set('_targetUrl', this.requestUrl);\n        params.appendAll(this.params);\n        this.options.search = params;\n        \n        // not sure why, but this broke after upgrade. replaced with above ^\n        // this.params.replaceAll(params);\n        \n        if (this.spacesBase.tcProxyServer) {\n            this.requestUrl = this.spacesBase.tcProxyServer + '/secureProxy';\n        } else {\n            this.requestUrl = window.location.protocol + '//' +\n                window.location.host + '/secureProxy';\n        }\n        this.logging.debug('this.requestUrl', this.requestUrl);\n    }\n\n    public request(): Observable<Response> {\n        /**\n         * Execute the API request\n         * @param data - The resultStart value for pagination\n         * @return The http Response Object\n         */\n        this.logging.debug('this.requestUrl', this.requestUrl);\n        this.logging.debug('this.options', this.options);\n        this.logging.debug('this.useProxy', this.useProxy);\n\n        this.options.params = this.params;\n        this.options.headers = this.headers;\n\n        if (this.useProxy) { this.proxyUrl(); }\n        return this.http.request(this.requestUrl, this.options)\n            .map(\n                res => {\n                    this.logging.info('res.url', res.url);\n                    this.logging.info('res.status', res.status);\n                    return res;\n                },\n                err => {\n                    this.logging.error('error', err);\n                }\n            );\n    }\n\n    public resetOptions() {\n        /**\n         * Reset request options\n         * @return The RequestService Object\n         */\n        this.logging.info('resetOptions', 'resetOptions');\n        this.headers = new Headers();\n        this.headers.set('Accept', 'application/json');\n        this.params = new URLSearchParams('', new SpacesQueryEncoder(this.logging));\n        this.useProxy = false;\n        this.options = new RequestOptions({\n            headers: this.headers,\n            method: RequestMethod.Get,\n            search: this.params\n        });\n        return this;\n    }\n\n    private handleAjaxError(error: Response) {\n        /**\n         * Execute the API request\n         * @param err - The https Response Object\n         */\n        var errorText = error.text();\n        this.logging.error('Error', 'request to ' + error.url + \n            ' failed with: ' + errorText);\n        return Promise.reject(errorText || error);\n    }\n}",
    "import {\n    Injectable\n}\nfrom '@angular/core';\n\nimport {\n    SpacesLoggingService\n} from './spaces_logging.service'\n\n@Injectable()\nexport class SpacesStorageService {\n    /* bcs - app store testing */\n    public storage: any = {};\n\n    constructor(\n        private logging: SpacesLoggingService\n    ) { \n        this.logging.moduleColor('#00008b', '#fff', 'SpacesStorageService');\n    }\n\n    ngOnInit() { /* empty block */ }\n    \n    public create(key, value): void {\n        this.storage[key] = value;\n    }\n    \n    public read(key): any {\n        return this.storage[key];\n    }\n    \n    public delete(key): void {\n        delete this.storage[key];\n    }\n    \n    public update(key, value): void {\n        this.storage[key] = value;\n    }\n}",
    "import {\n    Injectable\n}\nfrom '@angular/core';\n\nimport {\n    SpacesLoggingService\n} from './spaces_logging.service';\n\n@Injectable()\nexport class SpacesUtilityService {\n    constructor(\n        private logging: SpacesLoggingService\n    ) { \n        this.logging.moduleColor('#2878b7', '#fff', 'SpacesUtilityService');\n    }\n\n    public isEmpty(obj): boolean {\n        /**\n         * Check to see if Object is empty\n         * @param obj - The object to check\n         */\n        let isEmpty = true;\n        if (Object.keys(obj).length > 0 && obj.constructor === Object) {\n            isEmpty = false;\n        }\n        return isEmpty;\n    }\n    \n    public findIndex(hay: any[], needle: string): number {\n        /**\n         * Return the index of a string in an array\n         * @param hay - The array continaing the string\n         * @param needle - The string to find\n         */\n        return hay.indexOf(needle);\n    }\n}",
    "import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SpacesBaseService } from '../../spaces_base.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'spaces-landing-page',\n  template: `<div *ngIf=\"!done\" class=\"centered\">\n  <h4>Checking parameters</h4>\n</div>\n\n<div *ngIf=\"done && missingParams.length > 0\" class=\"centered\">\n  <h4>You must configure parameters to use this app.</h4>\n</div>\n`,\n  styles: [`.centered{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin-top:150px}`]\n})\nexport class SpacesLandingPageComponent implements OnInit {\n\n  missingParams: any[] = [];\n  done = false;\n  constructor(private http: HttpClient, private spacesBaseService: SpacesBaseService, private router: Router) { }\n\n  public ngOnInit() {\n    this.spacesBaseService.initialized.then(() => {\n      const params = this.spacesBaseService.params;\n\n      if (params.develop === 'true') {\n        this.done = true;\n        this.router.navigate(['app']);\n        return;\n      }\n      this.http.get('install.json', {responseType: 'json'}).subscribe(\n        installJson => {\n\n          this.missingParams =\n            installJson['params']\n              .filter(param => param.required)\n              .filter(param => !params[param.name]);\n\n          this.done = true;\n\n          if (this.missingParams.length === 0) {\n            this.router.navigate(['app']);\n          }\n        },\n        err => {\n          console.log(err);\n        });\n    });\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\n\nimport { SpacesBaseService } from './lib/spaces_base.service';\nimport { SpacesLoggingService } from './lib/spaces_logging.service';\nimport { SpacesMessagesService } from './lib/spaces_messages.service';\nimport { SpacesParamsResolve } from './lib/spaces_params.resolve';\nimport { SpacesRequestService } from './lib/spaces_request.service';\nimport { SpacesStorageService } from './lib/spaces_storage.service';\nimport { SpacesUtilityService } from './lib/spaces_utilities.service';\n\n// Third part\nimport { BowserModule } from 'ngx-bowser';\nimport { SpacesLandingPageComponent } from './lib/components/spaces-landing-page/spaces-landing-page.component';\n\n@NgModule({\n    declarations: [\n        SpacesLandingPageComponent\n    ],\n    exports: [\n        SpacesLandingPageComponent\n    ],\n    imports: [\n        BowserModule,\n    ],\n    providers: [\n        SpacesBaseService,\n        SpacesLoggingService,\n        SpacesMessagesService,\n        SpacesParamsResolve,\n        SpacesRequestService,\n        SpacesStorageService,\n        SpacesUtilityService,\n    ]\n})\nexport class SpacesModule { }"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "SpacesLoggingService",
    "bowser",
    "_logLevel",
    "useColor",
    "defaultBackground",
    "defaultColor",
    "criticalBackground",
    "criticalColor",
    "debugBackground",
    "debugColor",
    "errorBackground",
    "errorColor",
    "importantBackground",
    "importantColor",
    "infoBackground",
    "infoColor",
    "warnBackground",
    "warnColor",
    "methodColors",
    "moduleColors",
    "levels",
    "debug",
    "info",
    "warn",
    "error",
    "critical",
    "important",
    "browser",
    "name",
    "toLowerCase",
    "defineProperty",
    "get",
    "keys",
    "set",
    "level",
    "disableColor",
    "criticalColors",
    "background",
    "color",
    "debugColors",
    "errorColors",
    "importantColors",
    "infoColors",
    "warnColors",
    "methodColor",
    "methodName",
    "methodIndex",
    "Error",
    "logStack",
    "stack",
    "split",
    "length",
    "parseLogLine",
    "method",
    "bg",
    "moduleColor",
    "moduleName",
    "module",
    "log",
    "title",
    "msg",
    "headerBg",
    "headerColor",
    "undefined",
    "caller",
    "c",
    "header",
    "toUpperCase",
    "getHeader",
    "join",
    "console",
    "css",
    "logLine",
    "data",
    "line_data",
    "fileName",
    "line",
    "divider1",
    "divider2",
    "trim",
    "match",
    "index",
    "type",
    "Injectable",
    "BowserService",
    "SpacesQueryEncoder",
    "_super",
    "tslib_1.__extends",
    "encodeKey",
    "k",
    "encodeURIComponent",
    "encodeValue",
    "v",
    "QueryEncoder",
    "SpacesBaseService",
    "http",
    "logging",
    "_this",
    "_initialized",
    "initPromise",
    "Promise",
    "resolve",
    "reject",
    "initPromiseResolver",
    "initPromiseRejector",
    "route",
    "state",
    "queryParamMap",
    "_params",
    "queryParams",
    "_tcToken",
    "decodeURIComponent",
    "_tcTokenExpires",
    "param",
    "initialized",
    "replace",
    "currentSeconds",
    "Date",
    "getTime",
    "tcTokenRenew",
    "params",
    "URLSearchParams",
    "options",
    "RequestOptions",
    "RequestMethod",
    "Get",
    "search",
    "url",
    "request",
    "subscribe",
    "res",
    "response",
    "json",
    "success",
    "apiToken",
    "apiTokenExpires",
    "err",
    "handleAjaxError",
    "errorText",
    "text",
    "Http",
    "SpacesMessagesService",
    "msgs",
    "showSuccess",
    "summary",
    "detail",
    "showMessage",
    "showInfo",
    "showWarning",
    "showError",
    "severity",
    "clearMessages",
    "push",
    "SpacesParamsResolve",
    "spacesBase",
    "SpacesQueryEncoder$1",
    "call",
    "SpacesRequestService",
    "headers",
    "Headers",
    "Delete",
    "Post",
    "Put",
    "proxy",
    "useProxy",
    "requestUrl",
    "key",
    "val",
    "authorization",
    "contentType",
    "body",
    "createActivityLog",
    "String",
    "modifiedSince",
    "owner",
    "resultLimit",
    "resultStart",
    "proxyUrl",
    "appendAll",
    "tcProxyServer",
    "window",
    "location",
    "protocol",
    "host",
    "map",
    "status",
    "resetOptions",
    "SpacesStorageService",
    "storage",
    "ngOnInit",
    "value",
    "read",
    "delete",
    "update",
    "SpacesUtilityService",
    "isEmpty",
    "obj",
    "findIndex",
    "hay",
    "needle",
    "indexOf",
    "SpacesLandingPageComponent",
    "spacesBaseService",
    "router",
    "missingParams",
    "done",
    "then",
    "develop",
    "navigate",
    "responseType",
    "installJson",
    "filter",
    "required",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "HttpClient",
    "Router",
    "SpacesModule",
    "NgModule",
    "declarations",
    "exports",
    "imports",
    "BowserModule",
    "providers"
  ],
  "mappings": "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"
}
